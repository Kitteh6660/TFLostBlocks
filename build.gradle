plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
}

archivesBaseName ="${rootProject.mod_name}-${minecraft_version}-${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
	    workingDirectory project.file('run')
	    systemProperty 'mixin.env.disableRefMap', 'true'
        modSource project.sourceSets.main
    }	
	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}
	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}
	data {
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    // flatDir {
    //     dir 'libs'
    // }
	maven { 
	    url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
	}
}

dependencies {
    implementation("net.neoforged:neoforge:${project.neoforge_version}")
	implementation "curse.maven:the-twilight-forest-227639:5699076"
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs": "tflostblocks.mixins.json"
        ])
}

// This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
